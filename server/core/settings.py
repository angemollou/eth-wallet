"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "aHR0cDovLzQ1LjE0MC4xNDcuMjA4OjU0MzIx"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Modules
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    # Apps
    "user",
    "djweb3",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    #     {
    #         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    #     },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            # requirement for ETH account
            "min_length": 10,
        },
    },
    #     {
    #         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    #     },
    #     {
    #         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    #     },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOWED_ORIGINS = ["http://localhost:3000"]
CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTP_ONLY = True
CSRF_TRUSTED_ORIGINS = ["http://localhost:3000"]
CORS_EXPOSE_HEADERS = ["Content-Type", "X-CSRFToken"]
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SAMESITE = "None"


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    # custom
    "AUTH_COOKIE": "access",
    # Cookie name. Enables cookies if value is set.
    "AUTH_COOKIE_REFRESH": "refresh",
    # A string like "example.com", or None for standard domain cookie.
    "AUTH_COOKIE_DOMAIN": None,
    # Whether the auth cookies should be secure (https:// only).
    "AUTH_COOKIE_SECURE": True,
    # Http only cookie flag.It's not fetch by javascript.
    "AUTH_COOKIE_HTTP_ONLY": True,
    "AUTH_COOKIE_PATH": "/",  # The path of the auth cookie.
    # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag.
    "AUTH_COOKIE_SAMESITE": "None",  # TODO: Modify to Lax
}


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # 'rest_framework_simplejwt.authentication.JWTAuthentication', # TODO: For now
        "user.authenticate.CustomAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
}

AUTH_USER_MODEL = "user.User"

ETH_NODE = {
    "chain_id": {
        "1": not DEBUG,  # Mainnet,
        "11155111": DEBUG,  # Sepolia testnet
        # "12345": DEBUG,  # Available/non-public yet
    },
    "network": {
        "mainnet": not DEBUG,  # Mainnet,
        "sepolia": DEBUG,  # Sepolia testnet
    },
    "restart-policy": "unless-stopped" if DEBUG else "on-failure",
    "output": {
        "container": BASE_DIR.joinpath(".ethnode"),
        "compose": {
            "json": str(BASE_DIR.joinpath("./docker-compose.json")),
            "yaml": str(BASE_DIR.joinpath("./docker-compose.yml")),
        },
    },
    "consensus": {
        "image": "sigp/lighthouse:latest",
        "entrypoint": ["sh", "-c"],
        "bin": ["lighthouse", "bn"],
        "name": "ethnode-consensus",
        "api": {
            "http": {
                "address": "0.0.0.0",
                "port": "5052",
                "allow-origin": "'*'",
                "enable-tls": False,
                "tls-cert": "cert.pem",
                "tls-key": "key.pem",
            },
        },
        "execution-endpoint": "http://ethnode-execution:8551",
        # Refer to this list `https://eth-clients.github.io/checkpoint-sync-endpoints/`
        "checkpoint-sync-url": (
            "https://sepolia.beaconstate.info"
            if DEBUG
            else "https://mainnet.checkpoint.sigp.io"
        ),
        "allow-insecure-genesis-sync": False,
    },
    "execution": {
        "image": "ethereum/client-go:latest",
        "entrypoint": ["sh", "-c"],
        "bin": ["geth"],
        "name": "ethnode-execution",
        "p2p": {"eth": "30303"},
        "auth": {
            "addr": "0.0.0.0",
            "port": "8551",
            "vhosts": "'*'",
        },
        "api": {
            "ipc": {
                "ipcpath": "/root/.ethereum/geth/geth.ipc",
                "ipcdisable": True,
            },
            "http": {
                "addr": "0.0.0.0",
                "port": "8545",
                "namespaces": "eth,net,web3",
                "corsdomain": "",
            },
            "ws": {
                "addr": "0.0.0.0",
                "port": "3334",
                "namespaces": "eth,net,web3",
                "origins": "'*'",
            },
        },
        "signer": "http://ethnode-signer:8550",
        # "signer": "/app/clef/clef.ipc",
    },
    "signer": {
        "image": "ethereum/client-go:alltools-latest",
        "entrypoint": ["sh", "-c"],
        "bin": ["clef"],
        "name": "ethnode-signer",
        "api": {
            "ipc": {
                "ipcpath": "/app/clef/clef.ipc",
                "ipcdisable": True,
            },
            "http": {
                "addr": "0.0.0.0",
                "port": "8550",
                "vhosts": "'*'",
            },
        },
        "nousb": True,
        "lightkdf": True,
        "master_password": "1234567890",  # > 10 characters
        "rules_js": """function OnSignerStartup() {
    return "Approve"
}
function OnApprovedTx() {
    return "Approve"
}
function ApproveListing() {
    return "Approve"
}
function ApproveTx() {
    return "Approve"
}
function ApproveSignData() {
    return "Approve"
}""",
        "4bytedb": """{
  "0d5f2659": "cashChequeBeneficiary(address,uint256,bytes)",
  "576d7271": "deploySimpleSwap(address,uint256)",
  "15efd8a7": "deploySimpleSwap(address,uint256,bytes32)",
  "2e1a7d4d": "withdraw(uint256)",
  "e9563f05": "createBatch(address,uint256,uint8,bytes32)",
  "5239af71": "createBatch(address,uint256,uint8,uint8,bytes32,bool)",
  "b67644b9": "topUp(bytes32,uint256)",
  "47aab79b": "increaseDepth(bytes32,uint8)",
  "4a2e7598": "commit(bytes32,bytes32,uint256)",
  "c1d810d5": "reveal(bytes32,uint8,bytes32,bytes32)",
  "4e71d92d": "claim()",
  "1ed2cd40": "depositStake(address,bytes32,uint256)",
  "e34c4527": "withdrawFromStake(bytes32,uint256)"
}""",
    },
}
